name: "CI/CD"
on:
  push:
    paths:
      - "**.go"
      - go.mod
      - go.sum
      - .github/workflows/CI_CD.yml

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    if: contains(github.ref, 'refs/tags') || (!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[skip all]'))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup Go 1.15
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
      - name: Run tests
        run: go test -v -ginkgo.v
  create_release:
    name: Create a new release
    runs-on: ubuntu-latest
    if: contains(github.ref, 'refs/tags')
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      release_name: ${{ steps.release_info.outputs.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Format release name and release body
        id: release_info
        run: |
          RELEASE_NAME=$(echo '${{ github.ref }}' | sed s#refs/tags/##g)
          echo "::set-output name=name::$RELEASE_NAME"
          BODY="::set-output name=body::$(cat CHANGELOG.md | sed -n "/${RELEASE_NAME//./\.}/,/^$/p" | sed 1d)"
          BODY="${BODY//'%'/'%25'}"
          BODY="${BODY//$'\n'/'%0A'}"
          BODY="${BODY//$'\r'/'%0D'}"
          echo $BODY
      - name: Create new release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release_info.outputs.name }}
          release_name: ${{ steps.release_info.outputs.name }}
          body: ${{ steps.release_info.outputs.body }}
          draft: false
          prerelease: ${{ contains(github.ref, '/v0.') }}
  upload_assets:
    name: Upload release assets
    runs-on: ubuntu-latest
    needs: create_release
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [386, amd64]
        exclude:
          - os: darwin
            arch: 386
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup Go 1.15
        uses: actions/setup-go@v2
      - name: Build binary
        run: GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o quick-factor-${{ matrix.os }}-${{ matrix.arch }}-${{ needs.create_release.outputs.release_name }}
      - name: Add '.exe' extension
        id: exe
        if: matrix.os == 'windows'
        run: |
          mv quick-factor-windows-${{ matrix.arch }}-${{ needs.create_release.outputs.release_name }} quick-factor-windows-${{ matrix.arch }}-${{ needs.create_release.outputs.release_name }}.exe
          echo "::set-output name=exe::.exe"
      - name: Upload asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./quick-factor-${{ matrix.os }}-${{ matrix.arch }}-${{ needs.create_release.outputs.release_name }}${{ steps.exe.outputs.exe }}
          asset_name: quick-factor-${{ matrix.os }}-${{ matrix.arch }}-${{ needs.create_release.outputs.release_name }}${{ steps.exe.outputs.exe }}
          asset_content_type: application/octet-stream
